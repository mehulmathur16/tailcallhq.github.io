"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4088],{46343:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rest","title":"Exposing GraphQL as REST APIs","description":"Exposing REST endpoints on top of GraphQL via the @rest directive.","source":"@site/docs/rest.md","sourceDirName":".","slug":"/graphql-rest-integration","permalink":"/docs/graphql-rest-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/rest.md","tags":[],"version":"current","lastUpdatedAt":1734952853000,"frontMatter":{"title":"Exposing GraphQL as REST APIs","description":"Exposing REST endpoints on top of GraphQL via the @rest directive.","slug":"graphql-rest-integration","sidebar_label":"REST on GraphQL"},"sidebar":"docs","previous":{"title":"Log Levels","permalink":"/docs/graphql-logging-levels-tailcall"},"next":{"title":"GraphQL Scalars","permalink":"/docs/graphql-scalars-guide"}}');var o=i(74848),r=i(28453);const s={title:"Exposing GraphQL as REST APIs",description:"Exposing REST endpoints on top of GraphQL via the @rest directive.",slug:"graphql-rest-integration",sidebar_label:"REST on GraphQL"},a=void 0,l={},c=[{value:"How it works",id:"how-it-works",level:2},{value:"Example",id:"example",level:2},{value:"Step 1: Define your GraphQL configuration",id:"step-1-define-your-graphql-configuration",level:3},{value:"Step 2: Define an operation using <code>@rest</code> directive",id:"step-2-define-an-operation-using-rest-directive",level:3},{value:"Step 3: Link the operation to the main config file",id:"step-3-link-the-operation-to-the-main-config-file",level:3},{value:"Response",id:"response",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In order to handle complicated business problems, modern systems frequently need to work with hundreds or even thousands of APIs. Because of its powerful API composition capabilities, GraphQL has been adopted by numerous organisations. But switching to GraphQL can be difficult. It involves a lot of team training as well as major adjustments to frontend and backend architectures."}),"\n",(0,o.jsxs)(n.p,{children:["That's why Tailcall has developed a directive called ",(0,o.jsx)(n.code,{children:"@rest"})," to streamline this transition and take advantage of GraphQL's power without requiring a complete overhaul. With the help of this directive, Tailcall GraphQL queries and mutations may be made available as REST endpoints."]}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,o.jsx)(n.p,{children:"This guide show you how to expose REST endpoints for your GraphQL operations by using the @rest directive like follows:"}),"\n",(0,o.jsx)(n.p,{children:"There are three main steps to this process:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Define your Tailcall GraphQL configuration file."}),"\n",(0,o.jsxs)(n.li,{children:["Define an operation using ",(0,o.jsx)(n.code,{children:"@rest"})," directive in a separate file."]}),"\n",(0,o.jsx)(n.li,{children:"Link the operation to the main config file."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-define-your-graphql-configuration",children:"Step 1: Define your GraphQL configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:'schema {\n  query: Query\n}\n\ntype Query {\n  post(id: Int!): Post\n    @http(\n      url: "https://jsonplaceholder.typicode.com/posts/{{.args.id}}"\n    )\n}\n\ntype Post {\n  userId: Int!\n  id: Int\n  title: String\n  body: String\n  user: User\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users/{{.value.userId}}"\n    )\n}\n\ntype User {\n  id: Int!\n  name: String!\n  username: String!\n  email: String!\n  phone: String\n  website: String\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["for more information on how to define your Tailcall GraphQL configuration file, please refer to the ",(0,o.jsx)(n.a,{href:"/docs/#writing-a-graphql-configuration",children:"Tailcall GraphQL Configuration"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"step-2-define-an-operation-using-rest-directive",children:["Step 2: Define an operation using ",(0,o.jsx)(n.code,{children:"@rest"})," directive"]}),"\n",(0,o.jsxs)(n.p,{children:["We will define an operation and use the ",(0,o.jsx)(n.code,{children:"@rest"})," directive to define a REST endpoint for the operation. We will create a new file and add the following content to it. Save the file with the\nfilename: ",(0,o.jsx)(n.code,{children:"user-operation.graphql"}),". You can name the file anything you want, but make sure to link it to the main config file in the next step."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:'query ($id: Int!) @rest(method: GET, path: "/post/$id") {\n  post(id: $id) {\n    id\n    title\n    body\n    user {\n      id\n      name\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["to know more about the ",(0,o.jsx)(n.code,{children:"@rest"})," directive, please refer to the ",(0,o.jsx)(n.a,{href:"/docs/rest-directive",children:"Tailcall GraphQL Directives"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"step-3-link-the-operation-to-the-main-config-file",children:"Step 3: Link the operation to the main config file"}),"\n",(0,o.jsxs)(n.p,{children:["checkout the ",(0,o.jsx)(n.code,{children:"@link"})," directive in the config snippet below to link the operation file. This step is crucial to make the REST endpoint available."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:'schema\n  #highlight-start\n  @link(type: Operation, src: "user-operation.graphql") {\n  #highlight-end\n  query: Query\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To know more about the ",(0,o.jsx)(n.code,{children:"links"})," configuration, please refer ",(0,o.jsx)(n.a,{href:"/docs/links-config",children:"it's documentation"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"response",children:"Response"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"REST Demo",src:i(74246).A+"",width:"2992",height:"1688"})}),"\n",(0,o.jsxs)(n.p,{children:["In summary, by utilizing the ",(0,o.jsx)(n.code,{children:"@rest"})," directive, we've seamlessly exposed RESTful services over Tailcall's GraphQL, enhancing the traditional posts API to offer richer functionality without additional code. This approach combines the simplicity and ubiquity of REST with the modularity and flexibility of GraphQL, allowing for easy consumption from any HTTP client while leveraging GraphQL's powerful data querying capabilities."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},74246:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/rest-a52c465c2068d2934afcdf32f01461b7.png"},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);