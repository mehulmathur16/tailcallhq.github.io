"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2278],{83738:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"directives/server","title":"@server","description":"The @server directive provides a comprehensive set of server configurations.","source":"@site/docs/directives/server.md","sourceDirName":"directives","slug":"/server-directive","permalink":"/docs/server-directive","draft":false,"unlisted":false,"editUrl":"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/directives/server.md","tags":[],"version":"current","lastUpdatedAt":1732308017000,"frontMatter":{"title":"@server","description":"The @server directive provides a comprehensive set of server configurations.","slug":"../server-directive"},"sidebar":"docs","previous":{"title":"@rest","permalink":"/docs/rest-directive"},"next":{"title":"@telemetry","permalink":"/docs/telemetry-directive"}}');var i=s(74848),t=s(28453);const a={title:"@server",description:"The @server directive provides a comprehensive set of server configurations.",slug:"../server-directive"},o=void 0,l={},c=[{value:"workers",id:"workers",level:2},{value:"port",id:"port",level:2},{value:"headers",id:"headers",level:2},{value:"cacheControl",id:"cachecontrol",level:2},{value:"custom",id:"custom",level:2},{value:"experimental",id:"experimental",level:2},{value:"setCookies",id:"setcookies",level:2},{value:"cors",id:"cors",level:2},{value:"vars",id:"vars",level:2},{value:"introspection",id:"introspection",level:2},{value:"queryValidation",id:"queryvalidation",level:2},{value:"responseValidation",id:"responsevalidation",level:2},{value:"globalResponseTimeout",id:"globalresponsetimeout",level:2},{value:"version",id:"version",level:2},{value:"cert",id:"cert",level:2},{value:"key",id:"key",level:2},{value:"showcase",id:"showcase",level:2},{value:"batchRequests",id:"batchrequests",level:2},{value:"routes",id:"routes",level:2},{value:"enableFederation",id:"enablefederation",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@server"})," directive is defined as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:'title="Directive Definition" showLineNumbers',children:"directive @server(\n  workers: Int\n  port: Int\n  headers: ServerHeaders\n  introspection: Boolean\n  queryValidation: Boolean\n  responseValidation: Boolean\n  globalResponseTimeout: Int\n  version: Version\n  cert: String\n  key: String\n  showcase: Boolean\n  batchRequests: Boolean\n  routes: Routes\n  enableFederation: Boolean\n  vars: [InputKeyValue!]\n) on SCHEMA\n\ninput ServerHeaders {\n  cacheControl: Boolean\n  custom: [InputKeyValue!]\n  experimental: [String!]\n  setCookies: Boolean\n  cors: CorsConfig\n}\n\ninput CorsConfig {\n  allowCredentials: Boolean\n  allowHeaders: [String!]\n  allowMethods: [Method!]\n  allowOrigins: [String!]\n  allowPrivateNetwork: Boolean\n  exposeHeaders: [String!]\n  maxAge: Int\n  vary: [String!]\n}\n\ninput Routes {\n  graphQL: String\n  status: String\n}\n\nenum Version {\n  HTTP1\n  HTTP2\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@server"})," directive, applied at the schema level, provides a comprehensive set of server configurations. It dictates server behavior and helps tune Tailcall for a range of use-cases."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(...[ServerSettings]...){\n    query: Query\n    mutation: Mutation\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this templated structure, replace ",(0,i.jsx)(n.code,{children:"...[ServerSettings]..."})," with specific configurations tailored to your project's needs. Adjust and expand these settings as necessary."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ServerSettings"})," options and their details appear below."]}),"\n",(0,i.jsx)(n.h2,{id:"workers",children:"workers"}),"\n",(0,i.jsxs)(n.p,{children:["Setting ",(0,i.jsx)(n.code,{children:"workers"})," to ",(0,i.jsx)(n.code,{children:"32"})," means that the GraphQL server will use 32 worker threads."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(workers: 32) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This example sets the ",(0,i.jsx)(n.code,{children:"workers"})," to ",(0,i.jsx)(n.code,{children:"32"}),", meaning the GraphQL server will use 32 worker threads."]}),"\n",(0,i.jsx)(n.h2,{id:"port",children:"port"}),"\n",(0,i.jsxs)(n.p,{children:["Setting the ",(0,i.jsx)(n.code,{children:"port"})," to ",(0,i.jsx)(n.code,{children:"8090"})," means that Tailcall will be accessible at ",(0,i.jsx)(n.code,{children:"http://localhost:8000"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(port: 8090) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This example sets the ",(0,i.jsx)(n.code,{children:"port"})," to ",(0,i.jsx)(n.code,{children:"8090"}),", making Tailcall accessible at ",(0,i.jsx)(n.code,{children:"http://localhost:8090"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Always choose non-standard ports, avoiding typical ones like 80 or 8080. Make sure your chosen port is free."})}),"\n",(0,i.jsx)(n.h2,{id:"headers",children:"headers"}),"\n",(0,i.jsx)(n.p,{children:"Allows intelligent configuration of the final response headers that's produced by Tailcall."}),"\n",(0,i.jsx)(n.h2,{id:"cachecontrol",children:"cacheControl"}),"\n",(0,i.jsxs)(n.p,{children:["Activating the ",(0,i.jsx)(n.code,{children:"cacheControl"})," configuration directs Tailcall to send ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control",children:"Cache-Control"})," headers in its responses. The ",(0,i.jsx)(n.code,{children:"max-age"})," value in the header matches the lowest of the values in the responses that Tailcall receives from its upstream. By default, this is ",(0,i.jsx)(n.code,{children:"false"}),", which means Tailcall does not set any header."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(headers: {cacheControl: true}) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"custom",children:"custom"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"custom"})," is an array of key-value pairs. These headers get added to the response of every request made to the server. This can be useful for adding headers like ",(0,i.jsx)(n.code,{children:"Access-Control-Allow-Origin"})," to allow cross-origin requests, or some headers like ",(0,i.jsx)(n.code,{children:"X-Allowed-Roles"})," for use by downstream services."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @server(\n    headers: {\n      custom: [\n        {key: "X-Allowed-Roles", value: "admin,user"}\n      ]\n    }\n  ) {\n  query: Query\n  mutation: Mutation\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"experimental",children:"experimental"}),"\n",(0,i.jsxs)(n.p,{children:["When the ",(0,i.jsx)(n.code,{children:"experimental"})," configuration is enabled, Tailcall can include headers starting with ",(0,i.jsx)(n.code,{children:"X-"})," in its responses, which are sourced from its upstream. By default, this feature is disabled (",(0,i.jsx)(n.code,{children:"[]"}),"), meaning Tailcall does not forward any such headers unless explicitly configured to do so."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @server(\n    headers: {experimental: ["X-Experimental-Header"]}\n  ) {\n  query: Query\n  mutation: Mutation\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"setcookies",children:"setCookies"}),"\n",(0,i.jsxs)(n.p,{children:["Enabling the ",(0,i.jsx)(n.code,{children:"setCookies"})," option instructs Tailcall to include ",(0,i.jsx)(n.code,{children:"set-cookie"})," headers in its responses, which are obtained from the headers of upstream responses."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(headers: {setCookies: true}) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cors",children:"cors"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cors"})," configuration allows you to enable ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",children:"CORS"})," on Tailcall. This is useful when you want to access Tailcall in the browser. Here is a simple configuration to get started with cors:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @server(\n    headers: {\n      cors: {allowHeaders: ["*"], allowOrigins: ["*"]}\n    }\n  ) {\n  query: Query\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The above setting will enable CORS on the server for all headers, origins & methods. You can further configure the cors settings to make it more secure with the following fields:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowCredentials"}),": Indicates whether the server allows credentials (e.g., cookies, authorization headers) to be sent in cross-origin requests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowHeaders"}),": A list of allowed headers in cross-origin requests. This can be used to specify custom headers that are allowed to be included in cross-origin requests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowMethods"}),": A list of allowed HTTP methods in cross-origin requests. These methods specify the actions that are permitted in cross-origin requests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowOrigins"}),": A list of origins that are allowed to access the server's resources in cross-origin requests. An origin can be a domain, a subdomain, or even 'null' for local file schemes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allowPrivateNetwork"}),": Indicates whether requests from private network addresses are allowed in cross-origin requests. Private network addresses typically include IP addresses reserved for internal networks."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"exposeHeaders"}),": A list of headers that the server exposes to the browser in cross-origin responses. Exposing certain headers allows client-side code to access them in the response."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"maxAge"}),": The maximum time (in seconds) that the client should cache preflight OPTIONS requests to avoid sending excessive requests to the server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"vary"}),": A list of header names that indicate the values of which might cause the server's response to vary, potentially affecting caching."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @server(\n    port: 8000\n    hostname: "0.0.0.0"\n    headers: {\n      cors: {\n        allowCredentials: false\n        allowHeaders: ["Authorization"]\n        allowMethods: [POST, GET, OPTIONS]\n        allowOrigins: ["abc.xyz"]\n        allowPrivateNetwork: true\n        exposeHeaders: ["Content-Type"]\n        maxAge: 360\n        vary: ["Origin"]\n      }\n    }\n  ) {\n  query: Query\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"vars",children:"vars"}),"\n",(0,i.jsx)(n.p,{children:"This configuration allows defining local variables for use during the server's operations. These variables are handy for storing constant configurations, secrets, or other shared information that operations might need."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @server(\n    vars: {key: "apiKey", value: "YOUR_API_KEY_HERE"}\n  ) {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  externalData: Data\n    @http(\n      url: "https://jsonplaceholder.typicode.com/external-api/data"\n      headers: [\n        {\n          key: "Authorization"\n          value: "Bearer {{.vars.apiKey}}"\n        }\n      ]\n    )\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the provided example, setting a variable named ",(0,i.jsx)(n.code,{children:"apiKey"}),' with a placeholder value of "YOUR_API_KEY_HERE" implies that whenever Tailcall fetches data from the ',(0,i.jsx)(n.code,{children:"externalData"})," endpoint, it includes the ",(0,i.jsx)(n.code,{children:"apiKey"})," in the Authorization header of the HTTP request."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Local variables, like ",(0,i.jsx)(n.code,{children:"apiKey"}),", are instrumental in securing access to external services or providing a unified place for configurations. Ensure that sensitive information stored this way is well protected and not exposed unintentionally, if your GraphQL configuration is publicly accessible."]})}),"\n",(0,i.jsx)(n.h2,{id:"introspection",children:"introspection"}),"\n",(0,i.jsxs)(n.p,{children:["This setting controls the server's allowance of introspection queries. Introspection, a core feature of GraphQL, allows clients to directly fetch schema information. This capability proves crucial for tools and client applications in comprehending the available types, fields, and operations. By default, the server enables this setting (",(0,i.jsx)(n.code,{children:"true"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(introspection: false) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Although introspection is beneficial during development and debugging stages, consider disabling it in production environments. Turning off introspection in live deployments can enhance security by preventing potential attackers from discerning the schema and any associated business logic or data structures."})}),"\n",(0,i.jsx)(n.h2,{id:"queryvalidation",children:"queryValidation"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"queryValidation"})," configuration determines if the server checks incoming GraphQL queries against the defined schema. Each query check ensures it matches the schema, preventing errors from incorrect or malformed queries. In some situations, you might want to disable it, notably to ",(0,i.jsx)(n.strong,{children:"enhance server performance"})," at the cost of these checks. This defaults to ",(0,i.jsx)(n.code,{children:"false"})," if not specified."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(queryValidation: true) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The example above sets ",(0,i.jsx)(n.code,{children:"queryValidation"})," to ",(0,i.jsx)(n.code,{children:"true"}),", enabling the validation phase for incoming queries."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Enable this in the development environment to ensure the queries sent are correct and validated. In the production environment, consider disabling it for improved performance."})}),"\n",(0,i.jsx)(n.h2,{id:"responsevalidation",children:"responseValidation"}),"\n",(0,i.jsxs)(n.p,{children:["Tailcall can automatically infer the schema of the HTTP endpoints for you. This information can check responses received from the upstream services. Enabling this setting allows you to do that. If not specified, the default setting for ",(0,i.jsx)(n.code,{children:"responseValidation"})," is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(responseValidation: true) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Disabling this setting will offer major performance improvements, but at the potential expense of data integrity."})}),"\n",(0,i.jsx)(n.h2,{id:"globalresponsetimeout",children:"globalResponseTimeout"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"globalResponseTimeout"})," configuration sets the max duration a query can run before the server terminates it. Essentially, it acts as a safeguard against long-running queries that could strain resources or pose security concerns."]}),"\n",(0,i.jsx)(n.p,{children:"If not explicitly defined, there might be a system-specific or default value that applies."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(globalResponseTimeout: 5000) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this given example, setting the ",(0,i.jsx)(n.code,{children:"globalResponseTimeout"})," to ",(0,i.jsx)(n.code,{children:"5000"})," milliseconds, or 5 seconds, means any query execution taking longer than this duration will be automatically terminated by"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Setting an appropriate response timeout in production environments is crucial. This optimizes resource use and serves as a security measure against potential denial-of-service attacks, where adversaries might run complex queries to exhaust server resources."})}),"\n",(0,i.jsx)(n.h2,{id:"version",children:"version"}),"\n",(0,i.jsxs)(n.p,{children:["The server uses the HTTP version. If not specified, the default value is ",(0,i.jsx)(n.code,{children:"HTTP1"}),". The available options are ",(0,i.jsx)(n.code,{children:"HTTP1"})," and ",(0,i.jsx)(n.code,{children:"HTTP2"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(version: HTTP2) {\n  query: Query\n  mutation: Mutation\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cert",children:"cert"}),"\n",(0,i.jsxs)(n.p,{children:["The path to certificate(s) for running the server over HTTP2 (HTTPS). If not specified, the default value is ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema @server(cert: "./cert.pem") {\n  query: Query\n  mutation: Mutation\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The certificate can be of any extension, but it's highly recommended to use standards (",(0,i.jsx)(n.code,{children:"pem"}),", ",(0,i.jsx)(n.code,{children:"crt"}),", ",(0,i.jsx)(n.code,{children:"key"}),")."]})}),"\n",(0,i.jsx)(n.h2,{id:"key",children:"key"}),"\n",(0,i.jsxs)(n.p,{children:["The path to the key for running the server over HTTP2 (HTTPS). If not specified, the default value is ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema @server(key: "./key.pem") {\n  query: Query\n  mutation: Mutation\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The key can be of any extension, but it's highly recommended to use standards (",(0,i.jsx)(n.code,{children:"pem"}),", ",(0,i.jsx)(n.code,{children:"crt"}),", ",(0,i.jsx)(n.code,{children:"key"}),")."]})}),"\n",(0,i.jsx)(n.h2,{id:"showcase",children:"showcase"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@server"})," directive's ",(0,i.jsx)(n.code,{children:"showcase"})," option allows for hands-on experimentation with server configurations in a controlled environment. This feature simplifies the process of exploring and testing different settings."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(showcase: true) {\n  query: Query\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"batchrequests",children:"batchRequests"}),"\n",(0,i.jsx)(n.p,{children:"Batching in GraphQL combines requests into one, reducing server round trips."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(\n  port: 8000\n  batchRequests: true\n)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Batching can improve performance but may introduce latency if one request in the batch takes longer. It also makes network traffic debugging harder."})}),"\n",(0,i.jsx)(n.h2,{id:"routes",children:"routes"}),"\n",(0,i.jsx)(n.p,{children:"This optional field allows you to customize the server's endpoint paths, enabling you to override the default values for the GraphQL and status endpoints. If not specified, the following default paths will be used:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["graphQL: ",(0,i.jsx)(n.code,{children:"/graphql"})]}),"\n",(0,i.jsxs)(n.li,{children:["status: ",(0,i.jsx)(n.code,{children:"/status"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema @server(routes: {graphQL: "/tailcall-gql", status: "/health"})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the GraphQL endpoint is changed to ",(0,i.jsx)(n.code,{children:"/tailcall-gql"})," and the status endpoint to ",(0,i.jsx)(n.code,{children:"/health"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"enablefederation",children:"enableFederation"}),"\n",(0,i.jsxs)(n.p,{children:["A boolean flag, if set to ",(0,i.jsx)(n.code,{children:"true"})," the Tailcall server will additionally act as federation subgraph. By default, it's disabled."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",metastring:"showLineNumbers",children:"schema @server(enableFederation: true)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);