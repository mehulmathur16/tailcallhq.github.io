"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7538],{1854:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var t=n(74848),o=n(28453);const s={title:"@discriminate",description:"The `@discriminate` directive is used to customize decoding of union types.",slug:"../discriminate"},r=void 0,a={id:"directives/discriminate",title:"@discriminate",description:"The `@discriminate` directive is used to customize decoding of union types.",source:"@site/docs/directives/discriminate.md",sourceDirName:"directives",slug:"/discriminate",permalink:"/tailcallhq.github.io/docs/discriminate",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/directives/discriminate.md",tags:[],version:"current",lastUpdatedAt:1731956751e3,frontMatter:{title:"@discriminate",description:"The `@discriminate` directive is used to customize decoding of union types.",slug:"../discriminate"},sidebar:"docs",previous:{title:"@call",permalink:"/tailcallhq.github.io/docs/call-directive"},next:{title:"@expr",permalink:"/tailcallhq.github.io/docs/expr-directive"}},c={},d=[];function l(e){const i={admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"By default a union type expects an object with a wrapper key representing the value type. For example say we have the following GraphQL schema:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  fooBar: [FooBar]\n    @http(url: "https://api.example.com/foobar")\n}\n\nunion FooBar = Foo | Bar\n\ntype Foo {\n  foo: String!\n}\n\ntype Bar {\n  bar: String!\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["The API is expected to respond with an object that is wrapped with a key representing the type of the value. For example for ",(0,t.jsx)(i.code,{children:"Foo"})," the response should look like:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'[\n  // API Response\n  {"Foo": {"foo": "Hello"}},\n  {"Bar": {"bar": "World"}}\n]\n'})}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"key"})," is always case sensitive and should match the type name."]})}),"\n",(0,t.jsx)(i.p,{children:"This allows Tailcall to correctly decode the response and resolve with the exact variant of the union type. However its also a common practice to have a special field to specify the type. For example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'[\n  {"type": "Foo", "foo": "Hello"},\n  {"type": "Boo", "bar": "World"}\n]\n'})}),"\n",(0,t.jsxs)(i.p,{children:["This can be achieved by modifying the schema to leverage the ",(0,t.jsx)(i.code,{children:"@discriminate"})," directive:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",metastring:"{4}",children:'type Query {\n  fooBar: FooBar\n    @http(url: "https://api.example.com/foobar")\n    @discriminate\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"@discriminate"})," directive is used to indicate explicitly that the union type should be resolved using a discriminator field."]}),"\n",(0,t.jsxs)(i.p,{children:["The directive can be further customized by providing the discriminator field ",(0,t.jsx)(i.code,{children:"name"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",metastring:"{4}",children:'type Query {\n  fooBar: FooBar\n    @http(url: "https://api.example.com/foobar")\n    @discriminate(name: "ty")\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["In this case the API is expected to respond with an object that has a key ",(0,t.jsx)(i.code,{children:"ty"})," representing the type of the value. For example for ",(0,t.jsx)(i.code,{children:"Foo"})," the response should look like:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{"ty": "Foo","foo": "Hello"}\n{"ty": "Bar","bar": "World"}\n'})}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsx)(i.p,{children:"The value of the discriminator field should match the type name in a case sensitive manner."})}),"\n",(0,t.jsxs)(i.p,{children:["Great! Congratulations on learning how to use the ",(0,t.jsx)(i.code,{children:"@discriminate"})," directive to customize decoding of union types. Now you can confidently work with union types in your GraphQL schema. \ud83c\udf89"]})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var t=n(96540);const o={},s=t.createContext(o);function r(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);