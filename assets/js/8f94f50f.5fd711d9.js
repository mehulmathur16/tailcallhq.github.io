"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7899],{44446:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"directives/js","title":"@js","description":"The @js directive allows you to use JavaScript functions to resolve fields in your GraphQL schema.","source":"@site/docs/directives/js.md","sourceDirName":"directives","slug":"/js-directive","permalink":"/tailcallhq.github.io/docs/js-directive","draft":false,"unlisted":false,"editUrl":"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/directives/js.md","tags":[],"version":"current","lastUpdatedAt":1732818775000,"frontMatter":{"title":"@js","description":"The @js directive allows you to use JavaScript functions to resolve fields in your GraphQL schema.","slug":"../js-directive"},"sidebar":"docs","previous":{"title":"@http","permalink":"/tailcallhq.github.io/docs/http-directive"},"next":{"title":"@link","permalink":"/tailcallhq.github.io/docs/link-directive"}}');var r=n(74848),t=n(28453);const o={title:"@js",description:"The @js directive allows you to use JavaScript functions to resolve fields in your GraphQL schema.",slug:"../js-directive"},c=void 0,a={},l=[{value:"Usage",id:"usage",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Combining Directives",id:"combining-directives",level:2}];function d(e){const i={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"@js"})," directive is defined as follows:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-graphql",metastring:'title="Directive Definition" showLineNumbers',children:'directive @js(\n  """\n  Name of the JavaScript function to be used as resolver\n  """\n  name: String!\n) on FIELD_DEFINITION\n'})}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"@js"})," directive allows you to use JavaScript functions to resolve fields in your GraphQL schema. This can be useful for custom data transformations or complex field resolutions."]}),"\n",(0,r.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"@js"})," directive is used to specify a JavaScript function that will resolve the value of a field. The directive takes\na single argument, ",(0,r.jsx)(i.code,{children:"name"}),", which is the name of the JavaScript function to be used."]}),"\n",(0,r.jsx)(i.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-graphql",metastring:"showLineNumbers",children:'fieldName: FieldType @js(name: "functionName")\n'})}),"\n",(0,r.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(i.p,{children:["Let's consider a ",(0,r.jsx)(i.code,{children:"foo.js"})," file which contains a ",(0,r.jsx)(i.code,{children:"resolve"})," function:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"function resolve(val) {\n  let json = JSON.parse(val)\n  return JSON.stringify(json.id)\n}\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Here is an example of how the ",(0,r.jsx)(i.code,{children:"@js"})," directive is used within a GraphQL schema:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-gql",metastring:"showLineNumbers",children:'schema\n  @link(type: Script, src: "./scripts/foo.js")\n  @server(port: 8000)\n  @upstream(httpCache: true) {\n  query: Query\n}\n\ntype Query {\n  posts: [Post]\n    @http(url: "https://jsonplaceholder.typicode.com/posts")\n}\n\ntype Post {\n  id: Int!\n  idx: Int! @js(name: "resolve")\n  userId: Int!\n  title: String!\n  body: String!\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsxs)(i.p,{children:["When using the ",(0,r.jsx)(i.code,{children:"@js"})," directive, it is important to handle errors within your JavaScript functions. For example, you can use try-catch blocks to catch and handle any errors that occur during the resolution process."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-javascript",children:'function resolve(val) {\n  try {\n    let json = JSON.parse(val)\n    return JSON.stringify(json.id)\n  } catch (error) {\n    console.error("Error resolving value:", error)\n    throw new Error("Failed to resolve value")\n  }\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(i.p,{children:["When using the ",(0,r.jsx)(i.code,{children:"@js"})," directive, keep in mind that JavaScript functions can introduce performance overhead, especially if they perform complex operations or are called frequently. To minimize performance impact, ensure that your functions are optimized and avoid unnecessary computations."]}),"\n",(0,r.jsx)(i.h2,{id:"combining-directives",children:"Combining Directives"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"@js"})," directive can be used in combination with other ",(0,r.jsx)(i.a,{href:"/tailcallhq.github.io/docs/tailcall-dsl-graphql-custom-directives#resolvable-directives",children:"resolvable directives"}),", with results merged deeply. This allows for powerful and flexible resolver configurations."]}),"\n",(0,r.jsxs)(i.p,{children:["For more details, see ",(0,r.jsx)(i.a,{href:"/tailcallhq.github.io/docs/tailcall-dsl-graphql-custom-directives",children:"Directives Documentation"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var s=n(96540);const r={},t=s.createContext(r);function o(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:i},e.children)}}}]);