"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[67],{70070:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>h,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"directives/graphQL","title":"@graphQL","description":"The @graphQL directive allows to specify a GraphQL API server to fetch data from.","source":"@site/docs/directives/graphQL.md","sourceDirName":"directives","slug":"/graphQL-directive","permalink":"/tailcallhq.github.io/docs/graphQL-directive","draft":false,"unlisted":false,"editUrl":"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/directives/graphQL.md","tags":[],"version":"current","lastUpdatedAt":1732308017000,"frontMatter":{"title":"@graphQL","description":"The @graphQL directive allows to specify a GraphQL API server to fetch data from.","slug":"../graphQL-directive"},"sidebar":"docs","previous":{"title":"@expr","permalink":"/tailcallhq.github.io/docs/expr-directive"},"next":{"title":"@grpc","permalink":"/tailcallhq.github.io/docs/grpc-directive"}}');var t=n(74848),a=n(28453);const i={title:"@graphQL",description:"The @graphQL directive allows to specify a GraphQL API server to fetch data from.",slug:"../graphQL-directive"},l=void 0,h={},c=[{value:"url",id:"url",level:2},{value:"name",id:"name",level:2},{value:"args",id:"args",level:2},{value:"headers",id:"headers",level:2},{value:"batch",id:"batch",level:2},{value:"dedupe",id:"dedupe",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"@graphQL"})," directive is defined as follows:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:'title="Directive Definition" showLineNumbers',children:"directive @graphQL(\n  url: String!\n  name: String!\n  args: [InputKeyValue!]\n  headers: [InputKeyValue!]\n  batch: Boolean\n  dedupe: Boolean\n) on FIELD_DEFINITION\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"@graphQL"})," directive allows to specify a GraphQL API server to fetch data from."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @graphQL(\n      url: "https://jsonplaceholder.typicode.com"\n      name: "userList"\n    )\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"@graphQL"})," directive facilitates fetching a list of users from the GraphQL API upstream. The ",(0,t.jsx)(r.a,{href:"#name",children:"name"})," argument specifies the root field's name on the upstream server. The upcoming request to the GraphQL server determines the ",(0,t.jsx)(r.code,{children:"User"})," type's inner fields for the request. Depending on the operation type within which one finds the ",(0,t.jsx)(r.code,{children:"@graphQL"})," directive, the GraphQL configuration determines the query's operation type."]}),"\n",(0,t.jsx)(r.p,{children:"For the next request with the config above:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:"query {\n  users {\n    id\n    name\n  }\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Tailcall will request the next query for the upstream:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:"query {\n  userList {\n    id\n    name\n  }\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"url",children:"url"}),"\n",(0,t.jsx)(r.p,{children:"This refers to the URL of the API."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @graphQL(\n      name: "users"\n      url: "https://graphqlzero.almansi.me/api"\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"name",children:"name"}),"\n",(0,t.jsx)(r.p,{children:"The root field's name on the upstream to request data from. For example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @graphQL(\n      url: "https://jsonplaceholder.typicode.com"\n      name: "userList"\n    )\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["When Tailcall receives a query for the ",(0,t.jsx)(r.code,{children:"users"})," field, it will request a query for ",(0,t.jsx)(r.code,{children:"userList"})," from the upstream."]}),"\n",(0,t.jsx)(r.h2,{id:"args",children:"args"}),"\n",(0,t.jsx)(r.p,{children:"Named arguments for the requested field. For example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  user: User\n    @graphQL(\n      url: "https://jsonplaceholder.typicode.com"\n      name: "user"\n      args: [{key: "id", value: "{{.value.userId}}"}]\n    )\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Will request the next query from the upstream for the first user's name:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:"query {\n  user(id: 1) {\n    name\n  }\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"headers",children:"headers"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"headers"})," parameter allows customizing the headers of the GraphQL request made by the ",(0,t.jsx)(r.code,{children:"@graphQL"})," directive. Specifying a key-value map of header names and their values achieves this."]}),"\n",(0,t.jsx)(r.p,{children:"For instance:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  users: User\n    @graphQL(\n      url: "https://jsonplaceholder.typicode.com"\n      name: "users"\n      headers: [{key: "X-Server", value: "Tailcall"}]\n    )\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["In this example, a request to ",(0,t.jsx)(r.code,{children:"/users"})," will include the HTTP header ",(0,t.jsx)(r.code,{children:"X-Server"})," with the value ",(0,t.jsx)(r.code,{children:"Tailcall"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"batch",children:"batch"}),"\n",(0,t.jsxs)(r.p,{children:["In case the upstream GraphQL server supports request batching, we can specify the ",(0,t.jsx)(r.code,{children:"batch"})," argument to batch requests to a single upstream into a single batch request. For example:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'schema\n  @upstream(\n    batch: {\n      maxSize: 1000\n      delay: 10\n      headers: ["X-Server", "Authorization"]\n    }\n  ) {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  users: [User]\n    @graphQL(\n      url: "https://jsonplaceholder.typicode.com"\n      name: "users"\n      batch: true\n    )\n  posts: [Post]\n    @graphQL(\n      url: "https://jsonplaceholder.typicode.com"\n      name: "posts"\n      batch: true\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"dedupe",children:"dedupe"}),"\n",(0,t.jsxs)(r.p,{children:["A boolean flag, if set to ",(0,t.jsx)(r.code,{children:"true"}),", will enable deduplication of IO operations to enhance performance. This flag prevents duplicate IO requests from being executed concurrently, reducing resource load. If not specified, this feature defaults to ",(0,t.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",metastring:"showLineNumbers",children:'@graphQL(\n  url: "https://jsonplaceholder.typicode.com",\n  name: "users",\n  dedupe: true\n)\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Make sure you have also specified batch settings to the ",(0,t.jsx)(r.code,{children:"@upstream"})," and to the ",(0,t.jsx)(r.code,{children:"@graphQL"})," directive."]})]})}function o(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var s=n(96540);const t={},a=s.createContext(t);function i(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);