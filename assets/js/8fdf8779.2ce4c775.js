"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5944],{23415:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"directives/http","title":"@http","description":"The @http directive indicates a field or node relies on a REST API.","source":"@site/docs/directives/http.md","sourceDirName":"directives","slug":"/http-directive","permalink":"/tailcallhq.github.io/docs/http-directive","draft":false,"unlisted":false,"editUrl":"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/directives/http.md","tags":[],"version":"current","lastUpdatedAt":1732308017000,"frontMatter":{"title":"@http","description":"The @http directive indicates a field or node relies on a REST API.","slug":"../http-directive"},"sidebar":"docs","previous":{"title":"@grpc","permalink":"/tailcallhq.github.io/docs/grpc-directive"},"next":{"title":"@js","permalink":"/tailcallhq.github.io/docs/js-directive"}}');var r=n(74848),i=n(28453);const l={title:"@http",description:"The @http directive indicates a field or node relies on a REST API.",slug:"../http-directive"},a=void 0,d={},o=[{value:"url",id:"url",level:2},{value:"method",id:"method",level:2},{value:"query",id:"query",level:2},{value:"body",id:"body",level:2},{value:"headers",id:"headers",level:2},{value:"batchKey",id:"batchkey",level:2},{value:"onRequest",id:"onrequest",level:2},{value:"onResponseBody",id:"onresponsebody",level:2},{value:"select",id:"select",level:2},{value:"dedupe",id:"dedupe",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"@http"})," directive is defined as follows:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:'title="Directive Definition" showLineNumbers',children:"directive @http(\n  url: String!\n  method: Method\n  query: [InputKeyValue!]\n  body: JSON\n  headers: [InputKeyValue!]\n  batchKey: [String!]\n  onRequest: String\n  onResponseBody: String\n  select: JSON\n  dedupe: Boolean\n) on FIELD_DEFINITION\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"@http"})," directive indicates a field or node relies on a REST API. For example:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @http(url: "https://jsonplaceholder.typicode.com/users")\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In this example, adding the ",(0,r.jsx)(s.code,{children:"@http"})," directive to the ",(0,r.jsx)(s.code,{children:"users"})," field of the ",(0,r.jsx)(s.code,{children:"Query"})," type indicates reliance on a REST API for the ",(0,r.jsx)(s.code,{children:"users"})," field. The ",(0,r.jsx)(s.a,{href:"#url",children:"url"})," argument specifies the REST API's url, which is ",(0,r.jsx)(s.code,{children:"https://jsonplaceholder.typicode.com/users"})," in this scenario. Querying the ",(0,r.jsx)(s.code,{children:"users"})," field prompts the GraphQL server to issue a GET request to ",(0,r.jsx)(s.code,{children:"https://jsonplaceholder.typicode.com/users"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"url",children:"url"}),"\n",(0,r.jsx)(s.p,{children:"Specifies the API's URL."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  users: [User]\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users"\n      url: "https://jsonplaceholder.typicode.com"\n    )\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["If your API endpoint contains dynamic segments, you can substitute variables using Mustache templates. For example, to fetch a specific user, you can write the url as ",(0,r.jsx)(s.code,{children:"/users/{{.args.id}}"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  user(id: ID!): User\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users/{{.args.id}}"\n    )\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"method",children:"method"}),"\n",(0,r.jsx)(s.p,{children:"Specifies the HTTP method for the API call. The default method is GET if not specified."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  createUser(input: UserInput!): User\n    @http(\n      method: "POST"\n      url: "https://jsonplaceholder.typicode.com/users"\n    )\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"query",children:"query"}),"\n",(0,r.jsx)(s.p,{children:"Represents the API call's query parameters, either as a static object or with dynamic parameters using Mustache templates. These parameters append to the URL."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  userPosts(id: ID!): [Post]\n    @http(\n      url: "https://jsonplaceholder.typicode.com/posts"\n      query: [\n        {\n          key: "userId"\n          value: "{{.args.id}}"\n          skipEmpty: false\n        }\n      ]\n    )\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"query"})," field and be further configured using the following fields:"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"key"})," : Represents the name of the query parameter."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"value"})," : A string literal or a mustache template representing the value of query parameter."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"skipEmpty"})," : When set to ",(0,r.jsx)(s.code,{children:"true"})," the query parameter is skipped if the value of the parameter is null, defaults to false."]}),"\n"]}),"\n",(0,r.jsx)(s.admonition,{type:"important",children:(0,r.jsxs)(s.p,{children:["When ",(0,r.jsx)(s.code,{children:"batchKey"})," is present, Tailcall considers the first ",(0,r.jsx)(s.code,{children:"query"})," parameter to be the batch query key, so remember to adjust the order of the items accordingly."]})}),"\n",(0,r.jsx)(s.h2,{id:"body",children:"body"}),"\n",(0,r.jsx)(s.p,{children:"Defines the API call's body, necessary for methods like POST or PUT. Pass it as a static object or use Mustache templates for variable substitution from the GraphQL variables."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  createUser(input: UserInput!): User\n    @http(\n      method: "POST"\n      url: "https://jsonplaceholder.typicode.com/users"\n      body: "{{.args.input}}"\n    )\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In the example above, the ",(0,r.jsx)(s.code,{children:"createUser"})," mutation sends a POST request to ",(0,r.jsx)(s.code,{children:"/users"}),", with the input object converted to JSON and included in the request body."]}),"\n",(0,r.jsx)(s.h2,{id:"headers",children:"headers"}),"\n",(0,r.jsxs)(s.p,{children:["Customizes the HTTP request headers made by the ",(0,r.jsx)(s.code,{children:"@http"})," directive. Specify a key-value map of header names and values."]}),"\n",(0,r.jsx)(s.p,{children:"For instance:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  createUser(input: UserInput!): User\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users"\n      headers: [{key: "X-Server", value: "Tailcall"}]\n    )\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In this example, a request to ",(0,r.jsx)(s.code,{children:"/users"})," will include a HTTP header ",(0,r.jsx)(s.code,{children:"X-Server"})," with the value ",(0,r.jsx)(s.code,{children:"Tailcall"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["You can make use of mustache templates to provide dynamic values for headers, derived from the arguments or ",(0,r.jsx)(s.a,{href:"/docs/graphql-resolver-context-tailcall",children:"context"})," provided in the request. For example:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Mutation {\n  users(name: String): User\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users"\n      headers: [\n        {key: "X-Server", value: "Tailcall"}\n        {key: "User-Name", value: "{{.args.name}}"}\n      ]\n    )\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["In this scenario, the ",(0,r.jsx)(s.code,{children:"User-Name"})," header's value will dynamically adjust according to the ",(0,r.jsx)(s.code,{children:"name"})," argument passed in the request."]}),"\n",(0,r.jsx)(s.h2,{id:"batchkey",children:"batchKey"}),"\n",(0,r.jsxs)(s.p,{children:["Groups data requests into a single call, enhancing efficiency. Refer to our ",(0,r.jsx)(s.a,{href:"/tailcallhq.github.io/docs/graphql-n-plus-one-problem-solved-tailcall",children:"n + 1 guide"})," for more details."]}),"\n",(0,r.jsx)(s.admonition,{type:"important",children:(0,r.jsxs)(s.p,{children:["When ",(0,r.jsx)(s.code,{children:"batchKey"})," is present, Tailcall considers the first ",(0,r.jsx)(s.code,{children:"query"})," parameter to be the batch query key, so remember to adjust the order of the items accordingly. Whereas, the last item from ",(0,r.jsx)(s.code,{children:"batchKey"})," is used to instruct which field is the ID of an object. In case that the returned result is a nested property ",(0,r.jsx)(s.code,{children:"batchKey"})," can be used as a path to extract and group the items for the returned result."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Post {\n  id: Int!\n  name: String!\n  user: User\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users"\n      query: [{key: "user_id", value: "{{.value.userId}}"}]\n      batchKey: ["users", "id"]\n    )\n}\n'})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:'query: {key: "user_id", value: "{{.value.userId}}"}]'}),": Instructs Tailcall CLI to generate a URL aligning the user id with ",(0,r.jsx)(s.code,{children:"userId"})," from the parent ",(0,r.jsx)(s.code,{children:"Post"}),", compiling a single URL for a batch of posts, such as ",(0,r.jsx)(s.code,{children:"/users?user_id=1&user_id=2&user_id=3...user_id=10"}),", consolidating requests into one."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"onrequest",children:"onRequest"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"onRequest"})," property accepts a string value representing the remote function to be called every time an HTTP request is initiated. Typically the remote function is defined in a linked JavaScript worker file."]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:["For defining a request middleware globally for all requests, refer to the ",(0,r.jsx)(s.a,{href:"/tailcallhq.github.io/docs/upstream-directive#onrequest",children:"upstream directive documentation"}),"."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  userPosts(id: ID!): [Post]\n    @http(\n      url: "https://jsonplaceholder.typicode.com/posts"\n      query: [{key: "userId", value: "{{.args.id}}"}]\n      onRequest: "someFunctionName"\n    )\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"onresponsebody",children:"onResponseBody"}),"\n",(0,r.jsxs)(s.p,{children:["This hook allows you to intercept and modify the response body from upstream services before it's processed by Tailcall. Like ",(0,r.jsx)(s.a,{href:"#onrequest",children:"onRequest"}),", it accepts a string value representing a middleware function defined in a JavaScript file. This function can be used to transform or validate the response data."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  user(id: Int!): User\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users/{{.args.id}}"\n      onResponseBody: "onResponse"\n    )\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"select",children:"select"}),"\n",(0,r.jsxs)(s.p,{children:["You can use ",(0,r.jsx)(s.code,{children:"select"})," with mustache syntax to re-construct the directives\nresponse to the desired format. This is useful when data are deeply\nnested or want to keep specific fields only from the response."]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["EXAMPLE 1: if we have a call that returns ",(0,r.jsx)(s.code,{children:'{ "user": { "items": [...], ... } ... }'})," we can use ",(0,r.jsx)(s.code,{children:'"{{.user.items}}"'}),", to extract the ",(0,r.jsx)(s.code,{children:"items"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["EXAMPLE 2: if we have a call that returns ",(0,r.jsx)(s.code,{children:'{ "foo": "bar", "fizz": { "buzz": "eggs", ... }, ... }'})," we can use ",(0,r.jsx)(s.code,{children:'{ foo: "{{.foo}}", buzz: "{{.fizz.buzz}}" }'})]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type Query {\n  userCompany(id: Int!): Company\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users/{{.args.id}}"\n      select: "{{.company}}"\n    )\n  userDetails(id: Int!): UserDetails\n    @http(\n      url: "https://jsonplaceholder.typicode.com/users/{{.args.id}}"\n      select: {\n        id: "{{.id}}"\n        city: "{{.address.city}}"\n        phone: "{{.phone}}"\n      }\n    )\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"dedupe",children:"dedupe"}),"\n",(0,r.jsxs)(s.p,{children:["A boolean flag, if set to ",(0,r.jsx)(s.code,{children:"true"}),", will enable deduplication of IO operations to enhance performance. This flag prevents duplicate IO requests from being executed concurrently, reducing resource load. If not specified, this feature defaults to ",(0,r.jsx)(s.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-graphql",metastring:"showLineNumbers",children:'@http(\n  url: "https://jsonplaceholder.typicode.com/users/"\n  dedupe: true\n)\n'})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(96540);const r={},i=t.createContext(r);function l(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);